[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "stateset-python"
version = "1.0.0"
description = "Python SDK for the Stateset API - Complete access to returns, warranties, orders, inventory, and work order management"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [
    { name = "StateSet", email = "support@stateset.com" }
]
maintainers = [
    { name = "StateSet Team", email = "support@stateset.com" }
]
keywords = [
    "stateset",
    "api",
    "sdk",
    "returns",
    "warranties", 
    "orders",
    "inventory",
    "work-orders",
    "maintenance",
    "manufacturing",
    "supply-chain"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "httpx>=0.24.0",
    "attrs>=21.3.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
    "ruff>=0.1.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/stateset/stateset-python"
Documentation = "https://docs.stateset.com/python-sdk"
Repository = "https://github.com/stateset/stateset-python"
Issues = "https://github.com/stateset/stateset-python/issues"
Changelog = "https://github.com/stateset/stateset-python/blob/main/CHANGELOG.md"

[tool.black]
line-length = 88
target-version = ["py38"]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=stateset",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
